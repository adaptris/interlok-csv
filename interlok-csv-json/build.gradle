

ext {
  delombokTargetDir = new File("${project.projectDir}/src/main/generated")
  componentName='Interlok Transform/JSON+CSV'
  componentDesc="Transform CSV into JSON and vice versa"
  jacksonVersion="2.17.0"
}

dependencies {
  api project(':interlok-csv')
  api ("com.adaptris:interlok-json:$interlokCoreVersion") { changing=true}
  // Dependency to platform/BOM
  implementation (platform("com.fasterxml.jackson:jackson-bom:$jacksonVersion"))
  api ("com.fasterxml.jackson.core:jackson-databind")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.extensions.delombokTask
}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

artifacts {
  archives javadocJar
  archives sourcesJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }
      artifact sourcesJar { classifier "sources" }

      pom.withXml {
        asNode().appendNode("description", componentDesc)
        asNode().appendNode("name", componentName)
        asNode().appendNode("url", "https://interlok.adaptris.net/interlok-docs/#/pages/cookbook/cookbook-csv-transform")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.6.6+")
        properties.appendNode("tags", "json,transform,csv")
        properties.appendNode("license", "false")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-csv")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

delombok {
  target = delombokTargetDir
}

task deleteGeneratedFiles(type: Delete) {
  delete file(testResourcesDir() + "/unit-tests.properties"), file(testResourcesDir() + "/unit-tests.properties.resolved"), delombokTargetDir
}

clean.dependsOn deleteGeneratedFiles
processTestResources.dependsOn copyUnitTestProperties
